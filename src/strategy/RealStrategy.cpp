#include <strategy/RealStrategy.h>
#include <strategy/FlopStrategy.h>
#include <strategy/TurnStrategy.h>
#include <strategy/RiverStrategy.h>
#include "Exceptions.h"
#include <spdlog/spdlog.h>
#include <spdlog/fmt/ostr.h>

void RealStrategy::createRealStrategy(const float bb, const Board& board, const Hand &hand,
                                      const std::vector<PlayerMoveInfo> &playersMoveInfo)
{
    if (board.river_ != Card::Unknown)
    {
        spdlog::info("Creating River strategy.");
        realStrategy_.reset(new RiverStrategy(bb, board, hand, playersMoveInfo));
        return;
    }

    if (board.turn_ != Card::Unknown)
    {
        spdlog::info("Creating Turn strategy.");
        realStrategy_.reset(new TurnStrategy(bb, board, hand, playersMoveInfo));
        return;
    }

    if (!board.flop_.empty())
    {
        spdlog::info("Creating Flop strategy.");
        realStrategy_.reset(new FlopStrategy(bb, board, hand, playersMoveInfo));
        return;
    }

    spdlog::info("Creating PreFlop strategy.");
    realStrategy_.reset(new PreFlopStrategy(position_, bb, board, hand, playersMoveInfo));
}

std::unique_ptr<Move> RealStrategy::callRaiseOrFold(const float bb, const Board& board, const Hand &hand, const std::vector<PlayerMoveInfo> &playersMoveInfo)
{
    createRealStrategy(bb, board, hand, playersMoveInfo);
    std::unique_ptr<Move> move = realStrategy_->play();

    if (move->isBet())
    {
        spdlog::error("Cannot use {} move generated by strategy, expected call, raise, fold or check for BB!", *move);
        throw WrongPlayerMoveError();
    }

    return move;
}

std::unique_ptr<Move> RealStrategy::checkOrBet(const Board& board, const Hand& hand, const std::vector<PlayerMoveInfo>& playersMoveInfo)
{
    createRealStrategy(0, board, hand, playersMoveInfo);
    std::unique_ptr<Move> move = realStrategy_->play();

    if (move->isRaise() || move->isCall())
    {
        spdlog::error("Cannot use {} move generated by strategy, expected check, bet or fold!", *move);
        throw WrongPlayerMoveError();
    }

    return move;
}
