#include <strategy/RealStrategy.h>
#include <strategy/FlopStrategy.h>
#include <strategy/TurnStrategy.h>
#include <strategy/RiverStrategy.h>
#include "Exceptions.h"
#include <spdlog/spdlog.h>
#include <spdlog/fmt/ostr.h>

void RealStrategy::createRealStrategy(const Board& board)
{
    if (board.river_ != Card::Unknown && !dynamic_cast<RiverStrategy*>(realStrategy_.get()))
    {
        spdlog::info("Creating river strategy.");
        realStrategy_.reset(new RiverStrategy());
    }
    else if (board.turn_ != Card::Unknown && !dynamic_cast<TurnStrategy*>(realStrategy_.get()))
    {
        spdlog::info("Creating turn strategy.");
        realStrategy_.reset(new TurnStrategy());
    }
    else if (!board.flop_.empty() && !dynamic_cast<FlopStrategy*>(realStrategy_.get()))
    {
        spdlog::info("Creating flop strategy.");
        realStrategy_.reset(new FlopStrategy());
    }
}

std::unique_ptr<Move> RealStrategy::callRaiseOrFold(const float bb, const Board& board, const Hand &hand, const std::vector<PlayerMoveInfo> &playersMoveInfo)
{
    createRealStrategy(board);
    std::unique_ptr<Move> move = realStrategy_->play(bb, board, hand, playersMoveInfo);

    if (move->isBet())
    {
        spdlog::error("Cannot use {} move generated by strategy, expected call, raise, fold or check for BB!", *move);
        throw WrongPlayerMoveError();
    }

    return move;
}

std::unique_ptr<Move> RealStrategy::checkOrBet(const Board& board, const Hand& hand, const std::vector<PlayerMoveInfo>& playersMoveInfo)
{
    createRealStrategy(board);
    std::unique_ptr<Move> move = realStrategy_->play(0, board, hand, playersMoveInfo);

    if (move->isRaise() || move->isCall())
    {
        spdlog::error("Cannot use {} move generated by strategy, expected check, bet or fold!", *move);
        throw WrongPlayerMoveError();
    }

    return move;
}
